
import java.awt.Color;
import java.io.File;
import java.net.URL;
import java.sql.SQLException;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.help.HelpBroker;
import javax.help.HelpSet;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextPane;
import javax.swing.SwingUtilities;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
/**
 *
 * @author PC GAMING
 */
public class Ventana extends javax.swing.JFrame {

    /**
     * Creates new form Ventana
     */
    ConectorMySQL datos = new ConectorMySQL("localhost", "spotifymod", "root", "");
    private List<String> generosValidos = Arrays.asList(
            "Rock", "Pódcast", "Novedades", "Pop", "Hip Hop", "Gaming", "Amor", "Jazz", "Relax", "Electrónica", "Anime",
            "Para dormir", "Ejercicio", "Para estar en casa", "Salsa"
    );
    private int contadorErrores = 0;
    private final int limiteErrores = 3;
    private JDialog secundaria;

    public Ventana() {
        initComponents();
        try {
            // Carga el fichero de ayuda
            File fichero = new File("src/help/help_set.hs");
            URL hsURL = fichero.toURI().toURL();

            // Crea el HelpSet y el HelpBroker
            HelpSet helpset = new HelpSet(getClass().getClassLoader(), hsURL);
            HelpBroker hb = helpset.createHelpBroker();

            // Pone ayuda a item de menu al pulsarlo y a F1 en ventana
            // principal y secundaria.
            hb.enableHelpOnButton(itemAyuda, "aplicacion", helpset);
            hb.enableHelpKey(this.getContentPane(), "ventana_principal",
                    helpset);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jBotonInicio = new javax.swing.JButton();
        jbuscarBoton = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel4 = new javax.swing.JPanel();
        jButton4 = new javax.swing.JButton();
        jBotonCrearLista = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jBotonUsuario = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jPanel7 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jBotonPodcast = new javax.swing.JButton();
        jBotonNovedades = new javax.swing.JButton();
        jBotonRock = new javax.swing.JButton();
        jBotonPop = new javax.swing.JButton();
        jBotonHipHop = new javax.swing.JButton();
        jBotonGaming = new javax.swing.JButton();
        jBotonAmor = new javax.swing.JButton();
        jBotonDormir = new javax.swing.JButton();
        jBotonEjercicio = new javax.swing.JButton();
        jBotonJazz = new javax.swing.JButton();
        jBotonElectronica = new javax.swing.JButton();
        jBotonRelax = new javax.swing.JButton();
        jBotonAnime = new javax.swing.JButton();
        jBotonEstarCasa = new javax.swing.JButton();
        jBotonSalsa = new javax.swing.JButton();
        jProgressBar1 = new javax.swing.JProgressBar();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        itemAyuda = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(0, 0, 0));

        jPanel2.setBackground(new java.awt.Color(51, 51, 51));

        jButton1.setBackground(new java.awt.Color(51, 51, 51));
        jButton1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/icons8-spotify-30.png"))); // NOI18N
        jButton1.setText(" Spotify");
        jButton1.setBorderPainted(false);
        jButton1.setContentAreaFilled(false);

        jBotonInicio.setBackground(new java.awt.Color(51, 51, 51));
        jBotonInicio.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jBotonInicio.setForeground(new java.awt.Color(255, 255, 255));
        jBotonInicio.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/hogar.png"))); // NOI18N
        jBotonInicio.setText("  Inicio");
        jBotonInicio.setBorder(null);
        jBotonInicio.setBorderPainted(false);
        jBotonInicio.setContentAreaFilled(false);
        jBotonInicio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBotonInicioActionPerformed(evt);
            }
        });

        jbuscarBoton.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jbuscarBoton.setForeground(new java.awt.Color(255, 255, 255));
        jbuscarBoton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/buscar.png"))); // NOI18N
        jbuscarBoton.setText("  Buscar");
        jbuscarBoton.setBorder(null);
        jbuscarBoton.setBorderPainted(false);
        jbuscarBoton.setContentAreaFilled(false);
        jbuscarBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbuscarBotonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton1))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jbuscarBoton)
                            .addComponent(jBotonInicio))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jButton1)
                .addGap(18, 18, 18)
                .addComponent(jBotonInicio)
                .addGap(18, 18, 18)
                .addComponent(jbuscarBoton)
                .addContainerGap(41, Short.MAX_VALUE))
        );

        jPanel3.setBackground(new java.awt.Color(51, 51, 51));

        jScrollPane1.setBorder(null);

        jPanel4.setBackground(new java.awt.Color(51, 51, 51));

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 328, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 375, Short.MAX_VALUE)
        );

        jScrollPane1.setViewportView(jPanel4);

        jButton4.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jButton4.setForeground(new java.awt.Color(255, 255, 255));
        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/biblioteca.png"))); // NOI18N
        jButton4.setText("  Tu biblioteca");
        jButton4.setBorder(null);
        jButton4.setBorderPainted(false);
        jButton4.setContentAreaFilled(false);

        jBotonCrearLista.setBackground(new java.awt.Color(51, 51, 51));
        jBotonCrearLista.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/icons8-más-24.png"))); // NOI18N
        jBotonCrearLista.setBorder(null);
        jBotonCrearLista.setBorderPainted(false);
        jBotonCrearLista.setContentAreaFilled(false);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jButton4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 82, Short.MAX_VALUE)
                .addComponent(jBotonCrearLista)
                .addGap(30, 30, 30))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton4)
                    .addComponent(jBotonCrearLista))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 352, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel5.setBackground(new java.awt.Color(51, 51, 51));

        jButton6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/icons8-atrás-24.png"))); // NOI18N
        jButton6.setBorder(null);
        jButton6.setBorderPainted(false);
        jButton6.setContentAreaFilled(false);
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/icons8-atrás-24 (1).png"))); // NOI18N
        jButton7.setBorder(null);
        jButton7.setBorderPainted(false);
        jButton7.setContentAreaFilled(false);
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jBotonUsuario.setBackground(new java.awt.Color(51, 51, 51));
        jBotonUsuario.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/configuracion-de-la-base-de-datos.png"))); // NOI18N
        jBotonUsuario.setBorder(null);
        jBotonUsuario.setBorderPainted(false);
        jBotonUsuario.setContentAreaFilled(false);
        jBotonUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBotonUsuarioActionPerformed(evt);
            }
        });

        jScrollPane3.setBackground(new java.awt.Color(51, 51, 51));
        jScrollPane3.setBorder(null);
        jScrollPane3.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        jPanel7.setBackground(new java.awt.Color(51, 51, 51));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Explorar todo");

        jBotonPodcast.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/150150 (1).png"))); // NOI18N
        jBotonPodcast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBotonPodcastActionPerformed(evt);
            }
        });

        jBotonNovedades.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/150150 (2).png"))); // NOI18N
        jBotonNovedades.setBorderPainted(false);
        jBotonNovedades.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBotonNovedadesActionPerformed(evt);
            }
        });

        jBotonRock.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/150150 (4).png"))); // NOI18N
        jBotonRock.setBorderPainted(false);
        jBotonRock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBotonRockActionPerformed(evt);
            }
        });

        jBotonPop.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/150150 (3).png"))); // NOI18N
        jBotonPop.setBorderPainted(false);
        jBotonPop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBotonPopActionPerformed(evt);
            }
        });

        jBotonHipHop.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/150150 (5).png"))); // NOI18N
        jBotonHipHop.setBorderPainted(false);
        jBotonHipHop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBotonHipHopActionPerformed(evt);
            }
        });

        jBotonGaming.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/150150 (6).png"))); // NOI18N
        jBotonGaming.setBorderPainted(false);
        jBotonGaming.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBotonGamingActionPerformed(evt);
            }
        });

        jBotonAmor.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/150150 (7).png"))); // NOI18N
        jBotonAmor.setBorderPainted(false);
        jBotonAmor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBotonAmorActionPerformed(evt);
            }
        });

        jBotonDormir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/150150 (11).png"))); // NOI18N
        jBotonDormir.setBorderPainted(false);
        jBotonDormir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBotonDormirActionPerformed(evt);
            }
        });

        jBotonEjercicio.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/150150 (12).png"))); // NOI18N
        jBotonEjercicio.setContentAreaFilled(false);
        jBotonEjercicio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBotonEjercicioActionPerformed(evt);
            }
        });

        jBotonJazz.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/150150 (8).png"))); // NOI18N
        jBotonJazz.setBorderPainted(false);
        jBotonJazz.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBotonJazzActionPerformed(evt);
            }
        });

        jBotonElectronica.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/150150 (10).png"))); // NOI18N
        jBotonElectronica.setBorderPainted(false);
        jBotonElectronica.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBotonElectronicaActionPerformed(evt);
            }
        });

        jBotonRelax.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/150150 (9).png"))); // NOI18N
        jBotonRelax.setBorderPainted(false);
        jBotonRelax.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBotonRelaxActionPerformed(evt);
            }
        });

        jBotonAnime.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/150150 (13).png"))); // NOI18N
        jBotonAnime.setBorderPainted(false);
        jBotonAnime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBotonAnimeActionPerformed(evt);
            }
        });

        jBotonEstarCasa.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/150150.png"))); // NOI18N
        jBotonEstarCasa.setBorderPainted(false);
        jBotonEstarCasa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBotonEstarCasaActionPerformed(evt);
            }
        });

        jBotonSalsa.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/150150 (14).png"))); // NOI18N
        jBotonSalsa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBotonSalsaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel7Layout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addComponent(jBotonGaming, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jBotonAmor, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addContainerGap(14, Short.MAX_VALUE)
                                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel7Layout.createSequentialGroup()
                                        .addComponent(jBotonPodcast, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jBotonNovedades, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel7Layout.createSequentialGroup()
                                        .addComponent(jBotonDormir, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jBotonEjercicio, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jBotonRock, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jBotonJazz, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jBotonAnime, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(22, 22, 22)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jBotonEstarCasa, javax.swing.GroupLayout.PREFERRED_SIZE, 150, Short.MAX_VALUE)
                            .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jBotonPop, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                .addComponent(jBotonRelax, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jBotonSalsa, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jBotonHipHop, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                .addComponent(jBotonElectronica, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(0, 398, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addGap(13, 13, 13)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jBotonPodcast, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jBotonNovedades, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jBotonRock, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jBotonPop, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jBotonHipHop, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jBotonElectronica, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jBotonRelax, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addComponent(jBotonJazz, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addComponent(jBotonGaming, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addComponent(jBotonAmor, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jBotonAnime, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBotonEjercicio)
                    .addComponent(jBotonDormir, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBotonEstarCasa, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBotonSalsa, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(107, Short.MAX_VALUE))
        );

        jScrollPane3.setViewportView(jPanel7);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 863, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jBotonUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(24, 24, 24))))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jBotonUsuario, javax.swing.GroupLayout.DEFAULT_SIZE, 36, Short.MAX_VALUE)
                    .addComponent(jButton7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 549, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(81, 81, 81))
        );

        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("-:--");

        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("-:--");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(451, 451, 451)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 306, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, 625, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jProgressBar1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(22, 22, 22))
        );

        jMenu1.setText("File");

        itemAyuda.setText("Ayuda");
        jMenu1.add(itemAyuda);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jBotonPodcastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBotonPodcastActionPerformed
        String genero = "Pódcast";
        if (!generosValidos.contains(genero)) {
            // Muestra un JOptionPane de acceso denegado
            JOptionPane.showMessageDialog(this, "Tienes que actualizar a un género válido para poder continuar.", "Acceso Denegado", JOptionPane.ERROR_MESSAGE);
        } else {
            String consulta = "SELECT * FROM generosmusicales WHERE Genero = 'Pódcast'";
            try {
                datos.realizarConsulta(consulta);
                String titulo = datos.getTitulo();
                String descripcion = datos.getDescripcion();
                String cantantes = datos.getCantantes();
                // Recupera los cantantes de la base de datos y agrégalos a un ArrayList
                ArrayList<String> elementos = new ArrayList<>();
                if (cantantes != null) {
                    String[] cantantesArray = cantantes.split(", "); // Supongo que los cantantes están separados por comas y espacio
                    for (String cantante : cantantesArray) {
                        elementos.add(cantante);
                    }
                    jGeneroInfo2 jGeneroInfo2Instance = new jGeneroInfo2();
                    jGeneroInfo2Instance.actualizarDatos(titulo, descripcion, cantantes, elementos);
                    jGeneroInfo2Instance.setVisible(true);
                    dispose();
                } else {
                    JOptionPane.showMessageDialog(this, "No se encontró información de Pódcast.", "Acceso Denegado", JOptionPane.ERROR_MESSAGE);
                    contadorErrores++;

                    if (contadorErrores >= limiteErrores) {
                        int opcion = JOptionPane.showConfirmDialog(this, "Te recomendamos modificar los datos. ¿Deseas continuar?", "Recomendación", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
                        if (opcion == JOptionPane.YES_OPTION) {
                            new registroActualizable().setVisible(true);
                            dispose();
                        }
                    }
                }
            } catch (SQLException ex) {
                System.out.println("" + ex);
            }
        }
    }//GEN-LAST:event_jBotonPodcastActionPerformed

    private void jBotonNovedadesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBotonNovedadesActionPerformed
        // TODO add your handling code here:
        String genero = "Novedades";
        if (!generosValidos.contains(genero)) {
            // Muestra un JOptionPane de acceso denegado
            JOptionPane.showMessageDialog(this, "Tienes que actualizar a un género válido para poder continuar.", "Acceso Denegado", JOptionPane.ERROR_MESSAGE);
        } else {
            String consulta = "SELECT * FROM generosmusicales WHERE Genero = 'Novedades'";
            try {
                datos.realizarConsulta(consulta);
                String titulo = datos.getTitulo();
                String descripcion = datos.getDescripcion();
                String cantantes = datos.getCantantes();
                // Recupera los cantantes de la base de datos y agrégalos a un ArrayList
                ArrayList<String> elementos = new ArrayList<>();
                if (cantantes != null) {
                    String[] cantantesArray = cantantes.split(", "); // Supongo que los cantantes están separados por comas y espacio
                    for (String cantante : cantantesArray) {
                        elementos.add(cantante);
                    }
                    jGeneroInfo2 jGeneroInfo2Instance = new jGeneroInfo2();
                    jGeneroInfo2Instance.actualizarDatos(titulo, descripcion, cantantes, elementos);
                    jGeneroInfo2Instance.setVisible(true);
                    dispose();
                } else {
                    JOptionPane.showMessageDialog(this, "No se encontró información de Novedades.", "Acceso Denegado", JOptionPane.ERROR_MESSAGE);
                    contadorErrores++;

                    if (contadorErrores >= limiteErrores) {
                        int opcion = JOptionPane.showConfirmDialog(this, "Te recomendamos modificar los datos. ¿Deseas continuar?", "Recomendación", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);

                        if (opcion == JOptionPane.YES_OPTION) {
                            new registroActualizable().setVisible(true);
                            dispose();
                        }
                    }
                }
            } catch (SQLException ex) {
                System.out.println("" + ex);
            }
        }
    }//GEN-LAST:event_jBotonNovedadesActionPerformed

    private void jBotonRockActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBotonRockActionPerformed
        // TODO add your handling code here:
        String genero = "Rock";
        if (!generosValidos.contains(genero)) {
            // Muestra un JOptionPane de acceso denegado
            JOptionPane.showMessageDialog(this, "Tienes que actualizar a un género válido para poder continuar.", "Acceso Denegado", JOptionPane.ERROR_MESSAGE);
        } else {
            String consulta = "SELECT * FROM generosmusicales WHERE Genero = 'Rock'";
            try {
                datos.realizarConsulta(consulta);
                String titulo = datos.getTitulo();
                String descripcion = datos.getDescripcion();
                String cantantes = datos.getCantantes();
                // Recupera los cantantes de la base de datos y agrégalos a un ArrayList
                ArrayList<String> elementos = new ArrayList<>();
                if (cantantes != null) {
                    String[] cantantesArray = cantantes.split(", "); // Supongo que los cantantes están separados por comas y espacio
                    for (String cantante : cantantesArray) {
                        elementos.add(cantante);
                    }
                    jGeneroInfo2 jGeneroInfo2Instance = new jGeneroInfo2();
                    jGeneroInfo2Instance.actualizarDatos(titulo, descripcion, cantantes, elementos);
                    jGeneroInfo2Instance.setVisible(true);
                    dispose();
                } else {
                    JOptionPane.showMessageDialog(this, "No se encontró información de Rock.", "Acceso Denegado", JOptionPane.ERROR_MESSAGE);
                    contadorErrores++;

                    if (contadorErrores >= limiteErrores) {
                        int opcion = JOptionPane.showConfirmDialog(this, "Te recomendamos modificar los datos. ¿Deseas continuar?", "Recomendación", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);

                        if (opcion == JOptionPane.YES_OPTION) {
                            new registroActualizable().setVisible(true);
                            dispose();
                        }
                    }
                }
            } catch (SQLException ex) {
                System.out.println("" + ex);
            }
        }
    }//GEN-LAST:event_jBotonRockActionPerformed

    private void jBotonPopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBotonPopActionPerformed
        // TODO add your handling code here:
        String genero = "Pop";
        if (!generosValidos.contains(genero)) {
            // Muestra un JOptionPane de acceso denegado
            JOptionPane.showMessageDialog(this, "Tienes que actualizar a un género válido para poder continuar.", "Acceso Denegado", JOptionPane.ERROR_MESSAGE);
        } else {
            String consulta = "SELECT * FROM generosmusicales WHERE Genero = 'Pop'";
            try {
                datos.realizarConsulta(consulta);
                String titulo = datos.getTitulo();
                String descripcion = datos.getDescripcion();
                String cantantes = datos.getCantantes();
                // Recupera los cantantes de la base de datos y agrégalos a un ArrayList
                ArrayList<String> elementos = new ArrayList<>();
                if (cantantes != null) {
                    String[] cantantesArray = cantantes.split(", "); // Supongo que los cantantes están separados por comas y espacio
                    for (String cantante : cantantesArray) {
                        elementos.add(cantante);
                    }
                    jGeneroInfo2 jGeneroInfo2Instance = new jGeneroInfo2();
                    jGeneroInfo2Instance.actualizarDatos(titulo, descripcion, cantantes, elementos);
                    jGeneroInfo2Instance.setVisible(true);
                    dispose();
                } else {
                    JOptionPane.showMessageDialog(this, "No se encontró información de Pop.", "Acceso Denegado", JOptionPane.ERROR_MESSAGE);
                    contadorErrores++;

                    if (contadorErrores >= limiteErrores) {
                        int opcion = JOptionPane.showConfirmDialog(this, "Te recomendamos modificar los datos. ¿Deseas continuar?", "Recomendación", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);

                        if (opcion == JOptionPane.YES_OPTION) {
                            new registroActualizable().setVisible(true);
                            dispose();
                        }
                    }
                }
            } catch (SQLException ex) {
                System.out.println("" + ex);
            }
        }
    }//GEN-LAST:event_jBotonPopActionPerformed

    private void jBotonHipHopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBotonHipHopActionPerformed
        // TODO add your handling code here:
        String genero = "HIp Hop";
        if (!generosValidos.contains(genero)) {
            // Muestra un JOptionPane de acceso denegado
            JOptionPane.showMessageDialog(this, "Tienes que actualizar a un género válido para poder continuar.", "Acceso Denegado", JOptionPane.ERROR_MESSAGE);
        } else {
            String consulta = "SELECT * FROM generosmusicales WHERE Genero = 'Hip Hop'";
            try {
                datos.realizarConsulta(consulta);
                String titulo = datos.getTitulo();
                String descripcion = datos.getDescripcion();
                String cantantes = datos.getCantantes();
                // Recupera los cantantes de la base de datos y agrégalos a un ArrayList
                ArrayList<String> elementos = new ArrayList<>();
                if (cantantes != null) {
                    String[] cantantesArray = cantantes.split(", "); // Supongo que los cantantes están separados por comas y espacio
                    for (String cantante : cantantesArray) {
                        elementos.add(cantante);
                    }
                    jGeneroInfo2 jGeneroInfo2Instance = new jGeneroInfo2();
                    jGeneroInfo2Instance.actualizarDatos(titulo, descripcion, cantantes, elementos);
                    jGeneroInfo2Instance.setVisible(true);
                    dispose();
                } else {
                    JOptionPane.showMessageDialog(this, "No se encontró información de Hip Hop.", "Acceso Denegado", JOptionPane.ERROR_MESSAGE);
                    contadorErrores++;

                    if (contadorErrores >= limiteErrores) {
                        int opcion = JOptionPane.showConfirmDialog(this, "Te recomendamos modificar los datos. ¿Deseas continuar?", "Recomendación", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);

                        if (opcion == JOptionPane.YES_OPTION) {
                            new registroActualizable().setVisible(true);
                            dispose();
                        }
                    }
                }
            } catch (SQLException ex) {
                System.out.println("" + ex);
            }
        }
    }//GEN-LAST:event_jBotonHipHopActionPerformed

    private void jBotonGamingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBotonGamingActionPerformed
        // TODO add your handling code here:
        String genero = "Gaming";
        if (!generosValidos.contains(genero)) {
            // Muestra un JOptionPane de acceso denegado
            JOptionPane.showMessageDialog(this, "Tienes que actualizar a un género válido para poder continuar.", "Acceso Denegado", JOptionPane.ERROR_MESSAGE);
        } else {
            String consulta = "SELECT * FROM generosmusicales WHERE Genero = 'Gaming'";
            try {
                datos.realizarConsulta(consulta);
                String titulo = datos.getTitulo();
                String descripcion = datos.getDescripcion();
                String cantantes = datos.getCantantes();
                // Recupera los cantantes de la base de datos y agrégalos a un ArrayList
                ArrayList<String> elementos = new ArrayList<>();
                if (cantantes != null) {
                    String[] cantantesArray = cantantes.split(", "); // Supongo que los cantantes están separados por comas y espacio
                    for (String cantante : cantantesArray) {
                        elementos.add(cantante);
                    }
                    jGeneroInfo2 jGeneroInfo2Instance = new jGeneroInfo2();
                    jGeneroInfo2Instance.actualizarDatos(titulo, descripcion, cantantes, elementos);
                    jGeneroInfo2Instance.setVisible(true);
                    dispose();
                } else {
                    JOptionPane.showMessageDialog(this, "No se encontró información de Gaming.", "Acceso Denegado", JOptionPane.ERROR_MESSAGE);
                    contadorErrores++;

                    if (contadorErrores >= limiteErrores) {
                        int opcion = JOptionPane.showConfirmDialog(this, "Te recomendamos modificar los datos. ¿Deseas continuar?", "Recomendación", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);

                        if (opcion == JOptionPane.YES_OPTION) {
                            new registroActualizable().setVisible(true);
                            dispose();
                        }
                    }
                }
            } catch (SQLException ex) {
                System.out.println("" + ex);
            }
        }
    }//GEN-LAST:event_jBotonGamingActionPerformed

    private void jBotonAmorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBotonAmorActionPerformed
        // TODO add your handling code here:
        String genero = "Amor";
        if (!generosValidos.contains(genero)) {
            // Muestra un JOptionPane de acceso denegado
            JOptionPane.showMessageDialog(this, "Tienes que actualizar a un género válido para poder continuar.", "Acceso Denegado", JOptionPane.ERROR_MESSAGE);
        } else {
            String consulta = "SELECT * FROM generosmusicales WHERE Genero = 'Amor'";
            try {
                datos.realizarConsulta(consulta);
                String titulo = datos.getTitulo();
                String descripcion = datos.getDescripcion();
                String cantantes = datos.getCantantes();
                // Recupera los cantantes de la base de datos y agrégalos a un ArrayList
                ArrayList<String> elementos = new ArrayList<>();
                if (cantantes != null) {
                    String[] cantantesArray = cantantes.split(", "); // Supongo que los cantantes están separados por comas y espacio
                    for (String cantante : cantantesArray) {
                        elementos.add(cantante);
                    }
                    jGeneroInfo2 jGeneroInfo2Instance = new jGeneroInfo2();
                    jGeneroInfo2Instance.actualizarDatos(titulo, descripcion, cantantes, elementos);
                    jGeneroInfo2Instance.setVisible(true);
                    dispose();
                } else {
                    JOptionPane.showMessageDialog(this, "No se encontró información de Amor.", "Acceso Denegado", JOptionPane.ERROR_MESSAGE);
                    contadorErrores++;

                    if (contadorErrores >= limiteErrores) {
                        int opcion = JOptionPane.showConfirmDialog(this, "Te recomendamos modificar los datos. ¿Deseas continuar?", "Recomendación", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);

                        if (opcion == JOptionPane.YES_OPTION) {
                            new registroActualizable().setVisible(true);
                            dispose();
                        }
                    }
                }
            } catch (SQLException ex) {
                System.out.println("" + ex);
            }
        }
    }//GEN-LAST:event_jBotonAmorActionPerformed

    private void jBotonJazzActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBotonJazzActionPerformed
        // TODO add your handling code here:
        String genero = "Jazz";
        if (!generosValidos.contains(genero)) {
            // Muestra un JOptionPane de acceso denegado
            JOptionPane.showMessageDialog(this, "Tienes que actualizar a un género válido para poder continuar.", "Acceso Denegado", JOptionPane.ERROR_MESSAGE);
        } else {
            String consulta = "SELECT * FROM generosmusicales WHERE Genero = 'Jazz'";
            try {
                datos.realizarConsulta(consulta);
                String titulo = datos.getTitulo();
                String descripcion = datos.getDescripcion();
                String cantantes = datos.getCantantes();
                // Recupera los cantantes de la base de datos y agrégalos a un ArrayList
                ArrayList<String> elementos = new ArrayList<>();
                if (cantantes != null) {
                    String[] cantantesArray = cantantes.split(", "); // Supongo que los cantantes están separados por comas y espacio
                    for (String cantante : cantantesArray) {
                        elementos.add(cantante);
                    }
                    jGeneroInfo2 jGeneroInfo2Instance = new jGeneroInfo2();
                    jGeneroInfo2Instance.actualizarDatos(titulo, descripcion, cantantes, elementos);
                    jGeneroInfo2Instance.setVisible(true);
                    dispose();
                } else {
                    JOptionPane.showMessageDialog(this, "No se encontró información de Jazz.", "Acceso Denegado", JOptionPane.ERROR_MESSAGE);
                    contadorErrores++;

                    if (contadorErrores >= limiteErrores) {
                        int opcion = JOptionPane.showConfirmDialog(this, "Te recomendamos modificar los datos. ¿Deseas continuar?", "Recomendación", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);

                        if (opcion == JOptionPane.YES_OPTION) {
                            new registroActualizable().setVisible(true);
                            dispose();
                        }
                    }
                }
            } catch (SQLException ex) {
                System.out.println("" + ex);
            }
        }
    }//GEN-LAST:event_jBotonJazzActionPerformed

    private void jBotonRelaxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBotonRelaxActionPerformed
        // TODO add your handling code here:
        String genero = "Relax";
        if (!generosValidos.contains(genero)) {
            // Muestra un JOptionPane de acceso denegado
            JOptionPane.showMessageDialog(this, "Tienes que actualizar a un género válido para poder continuar.", "Acceso Denegado", JOptionPane.ERROR_MESSAGE);
        } else {
            String consulta = "SELECT * FROM generosmusicales WHERE Genero = 'Relax'";
            try {
                datos.realizarConsulta(consulta);
                String titulo = datos.getTitulo();
                String descripcion = datos.getDescripcion();
                String cantantes = datos.getCantantes();
                // Recupera los cantantes de la base de datos y agrégalos a un ArrayList
                ArrayList<String> elementos = new ArrayList<>();
                if (cantantes != null) {
                    String[] cantantesArray = cantantes.split(", "); // Supongo que los cantantes están separados por comas y espacio
                    for (String cantante : cantantesArray) {
                        elementos.add(cantante);
                    }
                    jGeneroInfo2 jGeneroInfo2Instance = new jGeneroInfo2();
                    jGeneroInfo2Instance.actualizarDatos(titulo, descripcion, cantantes, elementos);
                    jGeneroInfo2Instance.setVisible(true);
                    dispose();
                } else {
                    JOptionPane.showMessageDialog(this, "No se encontró información de Relax.", "Acceso Denegado", JOptionPane.ERROR_MESSAGE);
                    contadorErrores++;

                    if (contadorErrores >= limiteErrores) {
                        int opcion = JOptionPane.showConfirmDialog(this, "Te recomendamos modificar los datos. ¿Deseas continuar?", "Recomendación", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);

                        if (opcion == JOptionPane.YES_OPTION) {
                            new registroActualizable().setVisible(true);
                            dispose();
                        }
                    }
                }
            } catch (SQLException ex) {
                System.out.println("" + ex);
            }
        }
    }//GEN-LAST:event_jBotonRelaxActionPerformed

    private void jBotonElectronicaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBotonElectronicaActionPerformed
        // TODO add your handling code here:
        String genero = "Electrónica";
        if (!generosValidos.contains(genero)) {
            // Muestra un JOptionPane de acceso denegado
            JOptionPane.showMessageDialog(this, "Tienes que actualizar a un género válido para poder continuar.", "Acceso Denegado", JOptionPane.ERROR_MESSAGE);
        } else {
            String consulta = "SELECT * FROM generosmusicales WHERE Genero = 'Electrónica'";
            try {
                datos.realizarConsulta(consulta);
                String titulo = datos.getTitulo();
                String descripcion = datos.getDescripcion();
                String cantantes = datos.getCantantes();
                // Recupera los cantantes de la base de datos y agrégalos a un ArrayList
                ArrayList<String> elementos = new ArrayList<>();
                if (cantantes != null) {
                    String[] cantantesArray = cantantes.split(", "); // Supongo que los cantantes están separados por comas y espacio
                    for (String cantante : cantantesArray) {
                        elementos.add(cantante);
                    }
                    jGeneroInfo2 jGeneroInfo2Instance = new jGeneroInfo2();
                    jGeneroInfo2Instance.actualizarDatos(titulo, descripcion, cantantes, elementos);
                    jGeneroInfo2Instance.setVisible(true);
                    dispose();
                } else {
                    JOptionPane.showMessageDialog(this, "No se encontró información de Electrónica.", "Acceso Denegado", JOptionPane.ERROR_MESSAGE);
                    contadorErrores++;

                    if (contadorErrores >= limiteErrores) {
                        int opcion = JOptionPane.showConfirmDialog(this, "Te recomendamos modificar los datos. ¿Deseas continuar?", "Recomendación", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);

                        if (opcion == JOptionPane.YES_OPTION) {
                            new registroActualizable().setVisible(true);
                            dispose();
                        }
                    }
                }
            } catch (SQLException ex) {
                System.out.println("" + ex);
            }
        }
    }//GEN-LAST:event_jBotonElectronicaActionPerformed

    private void jBotonDormirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBotonDormirActionPerformed
        // TODO add your handling code here:
        String genero = "Para dormir";
        if (!generosValidos.contains(genero)) {
            // Muestra un JOptionPane de acceso denegado
            JOptionPane.showMessageDialog(this, "Tienes que actualizar a un género válido para poder continuar.", "Acceso Denegado", JOptionPane.ERROR_MESSAGE);
        } else {
            String consulta = "SELECT * FROM generosmusicales WHERE Genero = 'Para dormir'";
            try {
                datos.realizarConsulta(consulta);
                String titulo = datos.getTitulo();
                String descripcion = datos.getDescripcion();
                String cantantes = datos.getCantantes();
                // Recupera los cantantes de la base de datos y agrégalos a un ArrayList
                ArrayList<String> elementos = new ArrayList<>();
                if (cantantes != null) {
                    String[] cantantesArray = cantantes.split(", "); // Supongo que los cantantes están separados por comas y espacio
                    for (String cantante : cantantesArray) {
                        elementos.add(cantante);
                    }
                    jGeneroInfo2 jGeneroInfo2Instance = new jGeneroInfo2();
                    jGeneroInfo2Instance.actualizarDatos(titulo, descripcion, cantantes, elementos);
                    jGeneroInfo2Instance.setVisible(true);
                    dispose();
                } else {
                    JOptionPane.showMessageDialog(this, "No se encontró información de Para dormir.", "Acceso Denegado", JOptionPane.ERROR_MESSAGE);
                    contadorErrores++;

                    if (contadorErrores >= limiteErrores) {
                        int opcion = JOptionPane.showConfirmDialog(this, "Te recomendamos modificar los datos. ¿Deseas continuar?", "Recomendación", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);

                        if (opcion == JOptionPane.YES_OPTION) {
                            new registroActualizable().setVisible(true);
                            dispose();
                        }
                    }
                }
            } catch (SQLException ex) {
                System.out.println("" + ex);
            }
        }
    }//GEN-LAST:event_jBotonDormirActionPerformed

    private void jBotonEjercicioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBotonEjercicioActionPerformed
        // TODO add your handling code here:
        String genero = "Ejercicio";
        if (!generosValidos.contains(genero)) {
            // Muestra un JOptionPane de acceso denegado
            JOptionPane.showMessageDialog(this, "Tienes que actualizar a un género válido para poder continuar.", "Acceso Denegado", JOptionPane.ERROR_MESSAGE);
        } else {
            String consulta = "SELECT * FROM generosmusicales WHERE Genero = 'Ejercicio'";
            try {
                datos.realizarConsulta(consulta);
                String titulo = datos.getTitulo();
                String descripcion = datos.getDescripcion();
                String cantantes = datos.getCantantes();
                // Recupera los cantantes de la base de datos y agrégalos a un ArrayList
                ArrayList<String> elementos = new ArrayList<>();
                if (cantantes != null) {
                    String[] cantantesArray = cantantes.split(", "); // Supongo que los cantantes están separados por comas y espacio
                    for (String cantante : cantantesArray) {
                        elementos.add(cantante);
                    }
                    jGeneroInfo2 jGeneroInfo2Instance = new jGeneroInfo2();
                    jGeneroInfo2Instance.actualizarDatos(titulo, descripcion, cantantes, elementos);
                    jGeneroInfo2Instance.setVisible(true);
                    dispose();
                } else {
                    JOptionPane.showMessageDialog(this, "No se encontró información de Ejercicio.", "Acceso Denegado", JOptionPane.ERROR_MESSAGE);
                    contadorErrores++;

                    if (contadorErrores >= limiteErrores) {
                        int opcion = JOptionPane.showConfirmDialog(this, "Te recomendamos modificar los datos. ¿Deseas continuar?", "Recomendación", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);

                        if (opcion == JOptionPane.YES_OPTION) {
                            new registroActualizable().setVisible(true);
                            dispose();
                        }
                    }
                }
            } catch (SQLException ex) {
                System.out.println("" + ex);
            }
        }
    }//GEN-LAST:event_jBotonEjercicioActionPerformed

    private void jBotonAnimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBotonAnimeActionPerformed
        // TODO add your handling code here:
        String genero = "Anime";
        if (!generosValidos.contains(genero)) {
            // Muestra un JOptionPane de acceso denegado
            JOptionPane.showMessageDialog(this, "Tienes que actualizar a un género válido para poder continuar.", "Acceso Denegado", JOptionPane.ERROR_MESSAGE);
        } else {
            String consulta = "SELECT * FROM generosmusicales WHERE Genero = 'Anime'";
            try {
                datos.realizarConsulta(consulta);
                String titulo = datos.getTitulo();
                String descripcion = datos.getDescripcion();
                String cantantes = datos.getCantantes();
                // Recupera los cantantes de la base de datos y agrégalos a un ArrayList
                ArrayList<String> elementos = new ArrayList<>();
                if (cantantes != null) {
                    String[] cantantesArray = cantantes.split(", "); // Supongo que los cantantes están separados por comas y espacio
                    for (String cantante : cantantesArray) {
                        elementos.add(cantante);
                    }
                    jGeneroInfo2 jGeneroInfo2Instance = new jGeneroInfo2();
                    jGeneroInfo2Instance.actualizarDatos(titulo, descripcion, cantantes, elementos);
                    jGeneroInfo2Instance.setVisible(true);
                    dispose();
                } else {
                    JOptionPane.showMessageDialog(this, "No se encontró información de Anime.", "Acceso Denegado", JOptionPane.ERROR_MESSAGE);
                    contadorErrores++;

                    if (contadorErrores >= limiteErrores) {
                        int opcion = JOptionPane.showConfirmDialog(this, "Te recomendamos modificar los datos. ¿Deseas continuar?", "Recomendación", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);

                        if (opcion == JOptionPane.YES_OPTION) {
                            new registroActualizable().setVisible(true);
                            dispose();
                        }
                    }
                }
            } catch (SQLException ex) {
                System.out.println("" + ex);
            }
        }
    }//GEN-LAST:event_jBotonAnimeActionPerformed

    private void jBotonEstarCasaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBotonEstarCasaActionPerformed
        // TODO add your handling code here:
        String genero = "Para estar en casa";
        if (!generosValidos.contains(genero)) {
            // Muestra un JOptionPane de acceso denegado
            JOptionPane.showMessageDialog(this, "Tienes que actualizar a un género válido para poder continuar.", "Acceso Denegado", JOptionPane.ERROR_MESSAGE);
        } else {
            String consulta = "SELECT * FROM generosmusicales WHERE Genero = 'Para estar en casa'";
            try {
                datos.realizarConsulta(consulta);
                String titulo = datos.getTitulo();
                String descripcion = datos.getDescripcion();
                String cantantes = datos.getCantantes();
                // Recupera los cantantes de la base de datos y agrégalos a un ArrayList
                ArrayList<String> elementos = new ArrayList<>();
                if (cantantes != null) {
                    String[] cantantesArray = cantantes.split(", "); // Supongo que los cantantes están separados por comas y espacio
                    for (String cantante : cantantesArray) {
                        elementos.add(cantante);
                    }
                    jGeneroInfo2 jGeneroInfo2Instance = new jGeneroInfo2();
                    jGeneroInfo2Instance.actualizarDatos(titulo, descripcion, cantantes, elementos);
                    jGeneroInfo2Instance.setVisible(true);
                    dispose();
                } else {
                    JOptionPane.showMessageDialog(this, "No se encontró información de Para estar en casa.", "Acceso Denegado", JOptionPane.ERROR_MESSAGE);
                    contadorErrores++;

                    if (contadorErrores >= limiteErrores) {
                        int opcion = JOptionPane.showConfirmDialog(this, "Te recomendamos modificar los datos. ¿Deseas continuar?", "Recomendación", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);

                        if (opcion == JOptionPane.YES_OPTION) {
                            new registroActualizable().setVisible(true);
                            dispose();
                        }
                    }
                }
            } catch (SQLException ex) {
                System.out.println("" + ex);
            }
        }
    }//GEN-LAST:event_jBotonEstarCasaActionPerformed

    private void jBotonSalsaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBotonSalsaActionPerformed
        // TODO add your handling code here:
        String genero = "Salsa";
        if (!generosValidos.contains(genero)) {
            // Muestra un JOptionPane de acceso denegado
            JOptionPane.showMessageDialog(this, "Tienes que actualizar a un género válido para poder continuar.", "Acceso Denegado", JOptionPane.ERROR_MESSAGE);
        } else {
            String consulta = "SELECT * FROM generosmusicales WHERE Genero = 'Salsa'";
            try {
                datos.realizarConsulta(consulta);
                String titulo = datos.getTitulo();
                String descripcion = datos.getDescripcion();
                String cantantes = datos.getCantantes();
                // Recupera los cantantes de la base de datos y agrégalos a un ArrayList
                ArrayList<String> elementos = new ArrayList<>();
                if (cantantes != null) {
                    String[] cantantesArray = cantantes.split(", "); // Supongo que los cantantes están separados por comas y espacio
                    for (String cantante : cantantesArray) {
                        elementos.add(cantante);
                    }
                    jGeneroInfo2 jGeneroInfo2Instance = new jGeneroInfo2();
                    jGeneroInfo2Instance.actualizarDatos(titulo, descripcion, cantantes, elementos);
                    jGeneroInfo2Instance.setVisible(true);
                    dispose();
                } else {
                    JOptionPane.showMessageDialog(this, "No se encontró información de Salsa.", "Acceso Denegado", JOptionPane.ERROR_MESSAGE);
                    contadorErrores++;

                    if (contadorErrores >= limiteErrores) {
                        int opcion = JOptionPane.showConfirmDialog(this, "Te recomendamos modificar los datos. ¿Deseas hacerlo?", "Recomendación", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);

                        if (opcion == JOptionPane.YES_OPTION) {
                            new registroActualizable().setVisible(true);
                            dispose();
                        }
                    }
                }
            } catch (SQLException ex) {
                System.out.println("" + ex);
            }
        }
    }//GEN-LAST:event_jBotonSalsaActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jBotonUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBotonUsuarioActionPerformed
        // TODO add your handling code here:
        new registroActualizable().setVisible(true);
        dispose();
    }//GEN-LAST:event_jBotonUsuarioActionPerformed

    private void jBotonInicioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBotonInicioActionPerformed
        // TODO add your handling code here:
        new Principal().setVisible(true);
        dispose();
    }//GEN-LAST:event_jBotonInicioActionPerformed

    private void jbuscarBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbuscarBotonActionPerformed
        // TODO add your handling code here:
        // Solicita el término de búsqueda al usuario
        String terminoBusqueda = JOptionPane.showInputDialog(this, "Ingrese el término de búsqueda:", "Búsqueda", JOptionPane.QUESTION_MESSAGE);
        if (terminoBusqueda != null && !terminoBusqueda.isEmpty()) {
            try {
                ConectorMySQL conector = new ConectorMySQL("localhost", "spotifymod", "root", "");
                conector.conectar();

                // Consulta SQL para buscar registros que coincidan con el término de búsqueda
                String consulta = "SELECT * FROM generosmusicales WHERE Genero LIKE ? OR Titulo LIKE ? OR Cantantes LIKE ?";
                PreparedStatement preparedStatement = conector.getConexion().prepareStatement(consulta);
                preparedStatement.setString(1, "%" + terminoBusqueda + "%");
                preparedStatement.setString(2, "%" + terminoBusqueda + "%");
                preparedStatement.setString(3, "%" + terminoBusqueda + "%");

                ResultSet resultado = preparedStatement.executeQuery();

                StringBuilder resultados = new StringBuilder();
                while (resultado.next()) {
                    String genero = resultado.getString("Genero");
                    String titulo = resultado.getString("Titulo");
                    String cantantes = resultado.getString("Cantantes");

                    resultados.append("Género: ").append(genero).append("\n");
                    resultados.append("Título: ").append(titulo).append("\n");
                    resultados.append("Cantantes: ").append(cantantes).append("\n\n");
                }
                if (resultados.length() > 0) {
                    JOptionPane.showMessageDialog(this, "Resultados de la búsqueda:\n" + resultados.toString(), "Resultados", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(this, "No se encontraron resultados para el término de búsqueda.", "Sin Resultados", JOptionPane.INFORMATION_MESSAGE);
                }
                conector.desconectar();
            } catch (SQLException ex) {
                System.out.println("Error en la búsqueda: " + ex.getMessage());
            }
        }
    }//GEN-LAST:event_jbuscarBotonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Ventana.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Ventana.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Ventana.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Ventana.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Ventana().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem itemAyuda;
    private javax.swing.JButton jBotonAmor;
    private javax.swing.JButton jBotonAnime;
    private javax.swing.JButton jBotonCrearLista;
    private javax.swing.JButton jBotonDormir;
    private javax.swing.JButton jBotonEjercicio;
    private javax.swing.JButton jBotonElectronica;
    private javax.swing.JButton jBotonEstarCasa;
    private javax.swing.JButton jBotonGaming;
    private javax.swing.JButton jBotonHipHop;
    private javax.swing.JButton jBotonInicio;
    private javax.swing.JButton jBotonJazz;
    private javax.swing.JButton jBotonNovedades;
    private javax.swing.JButton jBotonPodcast;
    private javax.swing.JButton jBotonPop;
    private javax.swing.JButton jBotonRelax;
    private javax.swing.JButton jBotonRock;
    private javax.swing.JButton jBotonSalsa;
    private javax.swing.JButton jBotonUsuario;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton jbuscarBoton;
    // End of variables declaration//GEN-END:variables
}
